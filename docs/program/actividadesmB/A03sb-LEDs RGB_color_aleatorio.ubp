module main
author unknown
version 1 0 
description ''
variables Color 

script 100 128 {
whenButtonPressed 'A'
forever {
  for i 4 {
    Color = (color_RGB (random 0 255) (random 0 100) (random 0 100))
    sb_set_LED_to_color i Color
    waitMillis 1000
  }
  sb_LEDs_off
}
}


module Color Operators
author MicroBlocks
version 1 1 
description 'Support for color operations, Work with color hue, saturation, and brightness (HSV).'

  spec 'r' 'color_colorSwatch' '_' 'color'
  spec 'r' 'color_RGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'color_gray' 'gray _ %' 'num' 50
  spec 'r' 'color_random' 'random color'
  space
  spec 'r' 'color_red' 'red _' 'color'
  spec 'r' 'color_green' 'green _' 'color'
  spec 'r' 'color_blue' 'blue _' 'color'
  space
  spec 'r' '[misc:hsvColor]' 'color hue _ (0-360) saturation _ % brightness _ %' 'num num num' 0 90 100
  spec 'r' '[misc:hue]' 'hue _' 'color'
  spec 'r' '[misc:saturation]' 'saturation _' 'color'
  spec 'r' '[misc:brightness]' 'brightness _' 'color'
  space
  spec 'r' 'color_withHue' '_ with hue _ (0-360)' 'color num' nil 60
  spec 'r' 'color_withSaturation' '_ with saturation _ %' 'color num' nil 100
  spec 'r' 'color_withBrightness' '_ with brightness _ %' 'color num' nil 100

to color_RGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to color_blue color {
  return (color & 255)
}

to color_colorSwatch color {
  return color
}

to color_gray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to color_green color {
  return ((color >> 8) & 255)
}

to color_random {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to color_red color {
  return ((color >> 16) & 255)
}

to color_withBrightness color brightness {
  return ('[misc:hsvColor]' ('[misc:hue]' color) ('[misc:saturation]' color) brightness)
}

to color_withHue color hue {
  return ('[misc:hsvColor]' hue ('[misc:saturation]' color) ('[misc:brightness]' color))
}

to color_withSaturation color saturation {
  return ('[misc:hsvColor]' ('[misc:hue]' color) saturation ('[misc:brightness]' color))
}


module ShieldBit Output
author 'Joan GuillÃ©n'
version 1 3 
depends Color Tone 
tags keyestudio 'micro:bit' 
choices sb_motorTypes 'sb;all_motors' 'sb;servomotors' 'sb;DC/Stepper_motors' 
choices sb_stepperSteps turns degrees 
choices sb_motorDirections clockwise 'counter-clockwise' 
description 'Provides custom blocks for the shield:bit, which supports 4 DC motors, 2 stepper motors, speaker, headphone jack with volume control, and 4 NeoPixel LEDs.'
variables _sb_neoPixels _sb_pca9685_st_steps 

  spec ' ' 'sb_LEDs_off' 'sb LEDs off'
  spec ' ' 'sb_set_LEDs_to_color' 'sb set all LEDs to _' 'color'
  spec ' ' 'sb_set_LED_to_color' 'sb set LED _ (1-4) to _' 'num color' 1
  space
  spec ' ' 'sb_set_audio_output' 'sb send audio to shield _' 'bool' true
  space
  spec ' ' 'sb_stop_motors' 'sb stop _' 'menu.sb_motorTypes' 'sb;all_motors'
  space
  spec ' ' 'sb_turn_180_servo' 'sb turn 180 servo S- _ (1-8) to angle _' 'num num' 1 90
  spec ' ' 'sb_turn_360_servo' 'sb turn 360 servo S- _ (1-8) _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  space
  spec ' ' 'sb_turn_DC_motor' 'sb turn DC M- _ (1-4) motor _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  spec ' ' 'sb_turn_stepper_motor' 'sb turn Stepper- _ (1-2) motor _ for _ _' 'num menu.sb_motorDirections num menu.sb_stepperSteps' 1 'clockwise' 1 'turns'
  space
  spec ' ' 'sb_set_PWM' 'sb set pin S- _ (1-8) to _ %' 'num num' 1 100
  space
  spec ' ' '_sb_neoPixels_init' '_sb_neoPixels_init'
  spec ' ' '_sb_neoPixels_update' '_sb_neoPixels_update'
  space
  spec ' ' '_sb_pca9685_init' '_sb_pca9685_init'
  spec ' ' '_sb_pca9685_pwm' '_sb_pca9685_pwm pin _ from _ to _' 'num num num' 1 0 0

to '_sb_neoPixels_init' {
  comment 'Create NeoPixel list, if necessary.'
  if (_sb_neoPixels == 0) {
    _sb_neoPixels = (newList 4)
  }
}

to '_sb_neoPixels_update' {
  comment 'Always set the NeoPixel pin.'
  if ((boardType) == 'ESP32') {
    '[display:neoPixelSetPin]' 5 (booleanConstant false)
  } else {
    '[display:neoPixelSetPin]' 16 (booleanConstant false)
  }
  '[display:neoPixelSend]' _sb_neoPixels
  waitMicros 300
}

to '_sb_pca9685_init' {
  comment 'Return if already initialized.'
  if (_sb_pca9685_st_steps != 0) {
    return
  }
  _sb_pca9685_st_steps = 512
  i2cSet (hexToInt '40') 0 128
  waitMillis 100
  i2cSet (hexToInt '40') 0 16
  local '_sb_pca9685_prescale' 129
  i2cSet (hexToInt '40') (hexToInt 'FE') _sb_pca9685_prescale
  i2cSet (hexToInt '40') 0 0
  waitMillis 100
  i2cSet (hexToInt '40') 0 160
  for i 16 {
    '_sb_pca9685_pwm' (i - 1) 0 0
  }
}

to '_sb_pca9685_pwm' pin in out {
  '[sensors:i2cWrite]' 64 ('[data:makeList]' (6 + (4 * pin)) (in & 255) ((in >> 8) & 255) (out & 255) ((out >> 8) & 255))
}

to sb_LEDs_off {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels 0
  '_sb_neoPixels_update'
}

to sb_set_LED_to_color i color {
  '_sb_neoPixels_init'
  atPut i _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_LEDs_to_color color {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_PWM pin value {
  '_sb_pca9685_init'
  if (and (1 <= pin) (pin <= 8)) {
    if (value < 0) {value = 0}
    if (100 < value) {value = 100}
    value = ((value * 4095) / 100)
    '_sb_pca9685_pwm' (pin + 7) 0 value
  }
}

to sb_set_audio_output useShield {
  if useShield {
    if ((boardType) == 'ESP32') {
      _tonePin = 12
    } else {
      _tonePin = 0
    }
  } else {
    if ((boardType) == 'ESP32') {
      _tonePin = 33
    } else {
      _tonePin = -1
    }
  }
  _toneInitalized = (booleanConstant true)
}

to sb_stop_motors type {
  '_sb_pca9685_init'
  if (or (type == 'sb;DC/Steppers') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (or (type == 'sb;servomotors') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i + 7) 0 0
    }
  }
}

to sb_turn_180_servo s angle {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (angle < 0) {angle = 0}
    if (180 < angle) {angle = 180}
    angle = (((((angle * 1800) / 180) + 600) * 4095) / 20000)
    '_sb_pca9685_pwm' (s + 7) 0 angle
  }
}

to sb_turn_360_servo s direction speed {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    if (direction == 'counter-clockwise') {
      speed = (((((speed * 900) / 100) + 1500) * 4095) / 20000)
    } else {
      speed = (((((speed * -900) / 100) + 1500) * 4095) / 20000)
    }
    '_sb_pca9685_pwm' (s + 7) 0 speed
  }
}

to sb_turn_DC_motor m direction speed {
  '_sb_pca9685_init'
  if (and (1 <= m) (m <= 4)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    speed = ((speed * 4095) / 100)
    local 'pin2' ((m - 1) * 2)
    local 'pin1' (pin2 + 1)
    if (or (and (or (m == 1) (m == 2)) (direction == 'counter-clockwise')) (and (or (m == 3) (m == 4)) (not (direction == 'counter-clockwise')))) {
      pin2 = pin1
      pin1 = (pin2 - 1)
    }
    '_sb_pca9685_pwm' pin1 0 0
    '_sb_pca9685_pwm' pin2 0 speed
  }
}

to sb_turn_stepper_motor stp direction steps unit {
  '_sb_pca9685_init'
  if (steps < 0) {
    steps = 0
  }
  steps = (steps * ((1000 * _sb_pca9685_st_steps) / 50))
  if (unit == 'degrees') {
    steps = (steps / 360)
  }
  if (stp == 1) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 1 0 1023
      '_sb_pca9685_pwm' 0 1024 2047
      '_sb_pca9685_pwm' 3 2048 3071
      '_sb_pca9685_pwm' 2 3072 4095
    } else {
      '_sb_pca9685_pwm' 2 0 1023
      '_sb_pca9685_pwm' 3 1024 2047
      '_sb_pca9685_pwm' 0 2048 3071
      '_sb_pca9685_pwm' 1 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (stp == 2) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 7 0 1023
      '_sb_pca9685_pwm' 6 1024 2047
      '_sb_pca9685_pwm' 5 2048 3071
      '_sb_pca9685_pwm' 4 3072 4095
    } else {
      '_sb_pca9685_pwm' 4 0 1023
      '_sb_pca9685_pwm' 5 1024 2047
      '_sb_pca9685_pwm' 6 2048 3071
      '_sb_pca9685_pwm' 7 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i + 3) 0 0
    }
  }
}


module Tone Output
author MicroBlocks
version 1 9 
tags tone sound music audio note speaker 
choices tone_NoteName 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 
description 'Audio tone generation. Make music with MicroBlocks!
'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'nt;c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  space
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  space
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  space
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'
  spec ' ' '_tone init note names' '_tone init note names'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  'normalized note' = (ifExpression ((at 1 (v 'normalized note')) == 'n') (v 'normalized note') ('[data:join]' 'nt;' (v 'normalized note')))
  '_tone init note names'
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_tone init note names' {
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 'nt;c_' 'nt;db' 'nt;d_' 'nt;eb' 'nt;e_' 'nt;e#' 'nt;f_' 'nt;gb' 'nt;g_' 'nt;ab' 'nt;a_' 'nt;bb' 'nt;b_' 'nt;b#')
    _toneArezzoNotes = ('[data:makeList]' 'nt;do' 'nt;do#' 'nt;re' 'nt;re#' 'nt;mi' 'nt;fa' 'nt;fa#' 'nt;sol' 'nt;sol#' 'nt;la' 'nt;la#' 'nt;si' 'nt;do_' 'nt;dob' 'nt;re_' 'nt;reb' 'nt;mi_' 'nt;mi#' 'nt;fa_' 'nt;solb' 'nt;sol_' 'nt;lab' 'nt;la_' 'nt;sib' 'nt;si_' 'nt;si#')
  }
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}

