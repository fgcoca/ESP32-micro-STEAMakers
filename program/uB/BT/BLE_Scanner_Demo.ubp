module main
author MicroBlocks
version 1 0 
description ''
variables BLEnames 

script 70 147 {
whenCondition (bleScan_scanReceived)
local 'name' (bleScan_deviceName)
local 'nl' ('[data:unicodeString]' 10)
if (and (name != '') (name != '0000000000000000')) {
  if (-1 == ('[data:find]' name BLEnames)) {'[data:addLast]' name BLEnames}
  sayIt 'Nombre:' name nl 'MAC:' (bleScan_address) nl 'Tipo direcci√≥n:' (bleScan_addressType) nl 'RSSI:' (bleScan_RSSI) nl 'Longitud nombre:' (bleScan_hasType 9) nl ('[data:joinStrings]' BLEnames ',')
}
}

script 534 188 {
whenStarted
BLEnames = (newList 0)
}


module 'BLE Radio' Comm
author MicroBlocks
version 1 0 
description 'This library supports easy message exchange among boards that support Bluetooth Low Energy (BLE).

A message can contain a string, a number, or both. Messages are received by all boards in the same BLE radio group as the sender.

This library is similar to the Radio library, but messages are sent via BLE advertisements instead of the Nordic radio system.
'
variables _bleRadio_lastNumber _bleRadio_lastString 

  spec ' ' 'bleRadio_sendNumber' 'ble send number _' 'num' 123
  spec ' ' 'bleRadio_sendString' 'ble send string _' 'str' 'Hello!'
  spec ' ' 'bleRadio_sendPair' 'ble send pair _ = _' 'str num' 'light' 10
  space
  spec 'r' 'bleRadio_messageReceived' 'ble message received?'
  spec 'r' 'bleRadio_receivedInteger' 'ble last number'
  spec 'r' 'bleRadio_receivedString' 'ble last string'
  space
  spec ' ' '[ble:radioSetGroup]' 'ble set group _ (0-255)' 'num' 0

to bleRadio_messageReceived {
  local 'msg' ('[ble:radioReceive]')
  if ((size msg) < 4) {
    return (booleanConstant false)
  }
  _bleRadio_lastNumber = ((at 1 msg) | (((at 2 msg) << 8) | (((at 3 msg) << 16) | ((at 4 msg) << 24))))
  local 'highByte' (at 4 msg)
  if (and (64 <= highByte) (highByte <= 127)) {
    _bleRadio_lastNumber = 'out of range number (positve)'
  }
  if (and (128 <= highByte) (highByte <= 191)) {
    _bleRadio_lastNumber = 'out of range number (negative)'
  }
  _bleRadio_lastString = ('[data:join]' '' ('[data:copyFromTo]' msg 5))
  return (booleanConstant true)
}

to bleRadio_receivedInteger {
  return _bleRadio_lastNumber
}

to bleRadio_receivedString {
  if (_bleRadio_lastString == 0) {_bleRadio_lastString = ''}
  return _bleRadio_lastString
}

to bleRadio_sendNumber n {
  bleRadio_sendPair '' n
}

to bleRadio_sendPair s n {
  local 'msg' ('[data:newByteArray]' 4)
  comment 'MicroBlocks BLE Radio message format:
    MicroBlocks integer (4 bytes, LSB first)
    string (UTF8, variable length)'
  atPut 1 msg (n & 255)
  atPut 2 msg ((n >> 8) & 255)
  atPut 3 msg ((n >> 16) & 255)
  atPut 4 msg ((n >> 24) & 255)
  msg = ('[data:join]' msg ('[data:asByteArray]' s))
  '[ble:radioStartBeam]' msg
  waitMillis 250
  '[ble:radioStopBeam]'
}

to bleRadio_sendString s {
  bleRadio_sendPair s 0
}


module 'BLE Scanner' Input
author MicroBlocks
version 1 0 
description ''
variables _bleScan_data 

  spec 'r' 'bleScan_scanReceived' 'scan received'
  space
  spec 'r' 'bleScan_RSSI' 'RSSI'
  spec 'r' 'bleScan_address' 'address'
  spec 'r' 'bleScan_addressType' 'address type'
  spec 'r' 'bleScan_deviceName' 'device name'
  spec 'r' 'bleScan_hasType' 'hasType _' 'auto' 9
  space
  spec 'r' '_bleScan_hexDigit' '_bleScan_hexDigit _' 'auto' 10
  spec 'r' '_bleScan_extractString' '_bleScan_extractString _' 'auto' 9
  spec 'r' '_bleScan_typesInScan' '_bleScan_typesInScan'

to '_bleScan_extractString' type {
  local 'i' 9
  repeatUntil (i >= (size _bleScan_data)) {
    if ((at (i + 1) _bleScan_data) == type) {
      local 'length' ((at i _bleScan_data) - 1)
      return ('[data:convertType]' ('[data:copyFromTo]' _bleScan_data (i + 2) (i + (at i _bleScan_data))) 'string')
    }
    i += ((at i _bleScan_data) + 1)
  }
  return ''
}

to '_bleScan_hexDigit' n {
  return (at (n + 1) '0123456789abcdef')
}

to '_bleScan_typesInScan' {
  local 'i' 9
  local 'result' ('[data:makeList]')
  if (isType _bleScan_data 'byte array') {
    repeatUntil (i >= (size _bleScan_data)) {
      '[data:addLast]' (at (i + 1) _bleScan_data) result
      i += ((at i _bleScan_data) + 1)
    }
  }
  return result
}

to bleScan_RSSI {
  if (isType _bleScan_data 'byte array') {
    return (0 - (at 1 _bleScan_data))
  } else {
    return -999
  }
}

to bleScan_address {
  if (not (isType _bleScan_data 'byte array')) {return 'no scan data'}
  local 'result' ('[data:makeList]')
  for i 6 {
    local 'n' (at (9 - i) _bleScan_data)
    '[data:addLast]' ('_bleScan_hexDigit' (n >> 4)) result
    '[data:addLast]' ('_bleScan_hexDigit' (n & 15)) result
    '[data:addLast]' ':' result
  }
  '[data:delete]' 'last' result
  return ('[data:joinStrings]' result)
}

to bleScan_addressType {
  if (isType _bleScan_data 'byte array') {return (at 2 _bleScan_data)}
  return -1
}

to bleScan_deviceName {
  if (bleScan_hasType 9) {return ('_bleScan_extractString' 9)}
  if (bleScan_hasType 8) {return ('_bleScan_extractString' 8)}
  return ''
}

to bleScan_hasType type {
  local 'i' 9
  repeatUntil (i >= (size _bleScan_data)) {
    if ((at (i + 1) _bleScan_data) == type) {return (booleanConstant true)}
    i += ((at i _bleScan_data) + 1)
  }
  return (booleanConstant false)
}

to bleScan_scanReceived {
  _bleScan_data = (callCustomReporter '[ble:scanReceive]')
  return (isType _bleScan_data 'byte array')
}


module 'BLE Serial' Comm
author MicroBlocks
version 1 2 
description 'Support for Bluetooth Low Energy (BLE) Nordic UART service for serial communications.

The BLE Serial service is always available on boards that support BLE, along with the MicroBlocks IDE service. A connected client can use either service or both at once.

However, BLE only supports one client at a time. Thus, if the IDE is connected, another client cannot connect to use BLE serial. Similarly, if a USB serial client is connected, the IDE cannot connect via BLE.

However, the Chrome browser WebBluetooth implementation currently shares BLE connections between tabs. Thus, in Chrome, it is possible to the MicroBlocks IDE connected from one browser tab while another program (e.g. Snap!) is also connected to the same board via BLE.

Connecting a board to the IDE via a serial cable will disconnect any connected BLE clients to ensure exclusive IDE access to the board.'

  spec 'r' '[ble:uartConnected]' 'BLE serial connected?'
  space
  spec 'r' 'bleSerial_readString' 'BLE serial read string'
  spec 'r' 'bleSerial_readBytes' 'BLE serial read bytes'
  spec ' ' 'bleSerial_write' 'BLE serial write _' 'str' 'aStringOrByteArray'

to bleSerial_readBytes {
  return ('[ble:uartRead]' true)
}

to bleSerial_readString {
  return ('[ble:uartRead]' false)
}

to bleSerial_write aStringOrByteArray {
  comment 'Send the given string or byte array, breaking it into 240 byte chunks if necessary.'
  local 'bytes' ('[data:convertType]' aStringOrByteArray 'byte array')
  local 'i' 1
  local 'end' (size bytes)
  repeatUntil (i > end) {
    '[ble:uartWrite]' bytes i
    i += 240
  }
}

