module main
author unknown
version 1 0 
description ''

script 53 121 {
whenButtonPressed 'A'
sb_set_audio_output true
'play ringtone' 'Indy:
d=4,o=5,b=250:e,8p,8f,8g,8p,1c6,8p.,d,8p,8e,1f,p.,g,8p,8a,8b,8p,1f6,p,a,8p,8b,2c6,2d6,2e6,e,8p,8f,8g,8p,1c6,p,d6,8p,8e6,1f.6,g,8p,8g,e.6,8p,d6,8p,8g,e.6,8p,d6,8p,8g,f.6,8p,e6,8p,8d6,2c6'
}

script 50 275 {
whenButtonPressed 'B'
sb_set_audio_output true
'play ringtone' 'StarWars:d=4,o=5,b=112:
8d.,16p,8d.,16p,8d.,16p,8a#4,16p,16f,8d.,16p,8a#4,16p,16f,d.,8p,8a.,16p,8a.,16p,8a.,16p,8a#,16p,16f,8c#.,16p,8a#4,16p,16f,d.,8p,8d.6,16p,8d,16p,16d,8d6,8p,8c#6,16p,16c6,16b,16a#,8b,8p,16d#,16p,8g#,8p,8g,16p,16f#,16f,16e,8f,8p,16a#4,16p,8c#,8p,8a#4,16p,16c#,8f.,16p,8d,16p,16f,a.,8p,8d.6,16p,8d,16p,16d,8d6,8p,8c#6,16p,16c6,16b,16a#,8b,8p,16d#,16p,8g#,8p,8g,16p,16f#,16f,16e,8f,8p,16a#4,16p,8c#'
}


module Color Operators
author MicroBlocks
version 1 1 
description 'Support for color operations, Work with color hue, saturation, and brightness (HSV).'

  spec 'r' 'color_colorSwatch' '_' 'color'
  spec 'r' 'color_RGB' 'color r _ g _ b _ (0-255)' 'num num num' 0 100 100
  spec 'r' 'color_gray' 'gray _ %' 'num' 50
  spec 'r' 'color_random' 'random color'
  space
  spec 'r' 'color_red' 'red _' 'color'
  spec 'r' 'color_green' 'green _' 'color'
  spec 'r' 'color_blue' 'blue _' 'color'
  space
  spec 'r' '[misc:hsvColor]' 'color hue _ (0-360) saturation _ % brightness _ %' 'num num num' 0 90 100
  spec 'r' '[misc:hue]' 'hue _' 'color'
  spec 'r' '[misc:saturation]' 'saturation _' 'color'
  spec 'r' '[misc:brightness]' 'brightness _' 'color'
  space
  spec 'r' 'color_withHue' '_ with hue _ (0-360)' 'color num' nil 60
  spec 'r' 'color_withSaturation' '_ with saturation _ %' 'color num' nil 100
  spec 'r' 'color_withBrightness' '_ with brightness _ %' 'color num' nil 100

to color_RGB r g b {
  r = (maximum 0 (minimum r 255))
  g = (maximum 0 (minimum g 255))
  b = (maximum 0 (minimum b 255))
  return ((r << 16) | ((g << 8) | b))
}

to color_blue color {
  return (color & 255)
}

to color_colorSwatch color {
  return color
}

to color_gray percent {
  gray = ((percent * 255) / 100)
  gray = (maximum 0 (minimum gray 255))
  return ((gray << 16) | ((gray << 8) | gray))
}

to color_green color {
  return ((color >> 8) & 255)
}

to color_random {
  local 'n1' (random 100 200)
  local 'n2' (random 0 100)
  if (1 == (random 1 3)) {
    return ((n1 << 16) | (n2 << 8))
  } (1 == (random 1 2)) {
    return ((n2 << 16) | n1)
  } else {
    return ((n1 << 8) | n2)
  }
}

to color_red color {
  return ((color >> 16) & 255)
}

to color_withBrightness color brightness {
  return ('[misc:hsvColor]' ('[misc:hue]' color) ('[misc:saturation]' color) brightness)
}

to color_withHue color hue {
  return ('[misc:hsvColor]' hue ('[misc:saturation]' color) ('[misc:brightness]' color))
}

to color_withSaturation color saturation {
  return ('[misc:hsvColor]' ('[misc:hue]' color) saturation ('[misc:brightness]' color))
}


module 'LED Display' Output
author MicroBlocks
version 1 9 
choices led_imageMenu heart 'small heart' yes no happy sad confused angry asleep surprised silly fabulous meh 't-shirt' 'roller skate' duck house tortoise butterfly 'stick figure' ghost sword giraffe skull umbrella snake rabbit cow 'quarter note' 'eight note' pitchfork target triangle 'left triangle' 'chess board' diamond 'small diamond' square 'small square' scissors 
description 'Display primitives for the 5x5 LED display on the BBC micro:bit, Calliope mini and M5Atom Matrix. Boards with TFT displays (such as the Citilab ED1 or the M5Stack family) support these primitives with a simulated "fat pixel" display.'
variables _stop_scrolling_text 

  spec ' ' '[display:mbDisplay]' 'display _' 'microbitDisplay' 15237440
  spec ' ' 'led_displayImage' 'display image _ : x _ y _' 'menu.led_imageMenu num num' 'happy' 1 1
  spec ' ' '[display:mbDisplayOff]' 'clear display'
  space
  spec ' ' '[display:mbPlot]' 'plot x _ y _' 'num num' 3 3
  spec ' ' '[display:mbUnplot]' 'unplot x _ y _' 'num num' 3 3
  space
  spec ' ' 'displayCharacter' 'display character _' 'str' 'A'
  spec ' ' 'scroll_text' 'scroll text _ : pausing _ ms' 'str num' 'HELLO ROSA!' 100
  spec ' ' 'stopScrollingText' 'stop scrolling'
  space
  spec 'r' '_led_image' 'led image _' 'microbitDisplay' 15237440
  spec 'r' '_led_namedImage' '_led_namedImage _' 'menu.led_imageMenu' 'happy'
  spec 'r' '_led_imageData' '_led_imageData'
  spec ' ' 'set display color' 'set display color _' 'color'
  spec ' ' '_set display color' 'obsolete set display color _' 'color'

to '_led_image' twentyFiveBitInt {
  comment 'An LED image is a 25-bit integer'
  return twentyFiveBitInt
}

to '_led_imageData' {
  return 'heart:4685802,small heart:145728,yes:2269696,no:18157905,happy:15237440,sad:18284864,confused:22348096,angry:23036241,asleep:459616,surprised:4526090,silly:25984017,fabulous:15008639,meh:2236443,t-shirt:15154043,roller skate:11534104,duck:489702,house:10976708,tortoise:359872,butterfly:29332475,stick figure:18158564,ghost:23068334,sword:4657284,giraffe:10946627,skull:15171246,umbrella:6460398,snake:469859,rabbit:16104613,cow:4685361,quarter note:7573636,eight note:7590276,pitchfork:4357813,target:4681156,triangle:1026176,left triangle:32805985,chess board:11184810,diamond:4539716,small diamond:141440,square:33080895,small square:469440,scissors:20287859,'
}

to '_led_namedImage' name {
  local 'data' ('_led_imageData')
  local 'i' ('[data:find]' name data)
  if (i == -1) {
    comment 'Name not found'
    return 0
  }
  local 'start' (('[data:find]' ':' data i) + 1)
  local 'end' (('[data:find]' ',' data i) - 1)
  return ('[data:convertType]' ('[data:copyFromTo]' data start end) 'number')
}

to displayCharacter s {
  s = ('[data:join]' '' s)
  if ((size s) == 0) {
    '[display:mbDisplayOff]'
    return 0
  }
  '[display:mbDrawShape]' ('[display:mbShapeForLetter]' (at 1 s))
}

to led_displayImage imageName optionalX optionalY {
  local 'image' imageName
  if (isType image 'string') {
    image = ('_led_namedImage' imageName)
  }
  '[display:mbDrawShape]' image (argOrDefault 2 1) (argOrDefault 3 1)
}

to scroll_text text optionalDelay {
  text = ('[data:join]' '' text)
  local 'delay' 100
  if ((pushArgCount) > 1) {
    delay = optionalDelay
  }
  _stop_scrolling_text = (booleanConstant false)
  if ('Pico:ed' == (boardType)) {
    for position (((size text) * 6) + 18) {
      if _stop_scrolling_text {return 0}
      '[display:mbDisplayOff]'
      '[tft:text]' text (17 - position) 0 (colorSwatch 125 125 125 255) 1 true
      waitMillis (delay / 2)
    }
  } else {
    for position (((size text) * 6) + 6) {
      if _stop_scrolling_text {return 0}
      for i (size text) {
        '[display:mbDrawShape]' ('[display:mbShapeForLetter]' ('[data:unicodeAt]' i text)) (((i * 6) + 2) - position) 1
      }
      waitMillis delay
    }
  }
}

to 'set display color' color {
  callCustomCommand '[display:mbSetColor]' ('[data:makeList]' color)
}

to stopScrollingText {
  _stop_scrolling_text = (booleanConstant true)
  waitMillis 10
  '[display:mbDisplayOff]'
}


module MultiTone Output
author MicroBlocks
version 1 1 
description 'On boards that support it, play up to four simultaneous voices of music through a single speaker. The best sound quality is obtained by playing through through an amplified external speaker, but you can hear it through the built-in speakers on the micro:bit V2, Circuit Playground Express and Bluefruit, and M5 Stack/Core.

Note: This library does NOT work on the original micro:bit or Calliope mini!

To output the audio waveform, the board must have a DAC (e.g. SAMD21 and ESP32 boards) or fast enough pulse-width modulation (PWM) hardware to simulate a DAC (e.g. nRF52 boards). To tune the output to standard A=440 pitch on boards with different clock speeds, change the tuningConstant variable in _stepForNote.'
variables _multiTonePin _multiToneInitialized _v1 _v2 _v3 _v4 _v1Step _v2Step _v3Step _v4Step 

  spec ' ' 'playNoteOnVoice' 'play note _ octave _ for _ ms voice _' 'auto num num num' 'A' 0 500 1
  spec ' ' 'setMultitonePin' 'set multitone pin _' 'auto' ''
  spec 'r' '_baseFreqForNoteMulti' '_baseFreqForNoteMulti _' 'auto' 'A'
  spec ' ' '_initMultiTone' '_initMultiTone'
  spec ' ' '_multiToneLoop' '_multiToneLoop'
  spec 'r' '_nextSample' '_nextSample'
  spec 'r' '_stepForNote' '_stepForNote _ octave _' 'str num' 'A' 0
  spec 'r' '_uppercaseNote' '_uppercaseNote _' 'auto' ' a '

to '_baseFreqForNoteMulti' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case and may be followed
by # for a sharp or _ for a flat.'
  note = ('_uppercaseNote' note)
  if (note == 'C') {
    return 261626
  } (note == 'D') {
    return 293665
  } (note == 'E') {
    return 329628
  } (note == 'F') {
    return 349228
  } (note == 'G') {
    return 391995
  } (note == 'A') {
    return 440000
  } (note == 'B') {
    return 493883
  }
  if (or (note == 'C#') (note == 'D_')) {
    return 277183
  } (or (note == 'D#') (note == 'E_')) {
    return 311127
  } (or (note == 'F#') (note == 'G_')) {
    return 369994
  } (or (note == 'G#') (note == 'A_')) {
    return 415305
  } (or (note == 'A#') (note == 'B_')) {
    return 466164
  }
  comment 'Unrecognized note names map to 0.1 Hz, which is inaudible.
This helps users find typos in their tunes.'
  return 100
}

to '_initMultiTone' {
  if ((boardType) == 'micro:bit v2') {
    _multiTonePin = 27
  } ((boardType) == 'Clue') {
    _multiTonePin = 21
  } (or ((boardType) == 'Citilab ED1') ((boardType) == 'M5StickC')) {
    _multiTonePin = 26
  } ((boardType) == 'M5Stack-Core') {
    _multiTonePin = 25
  } else {
    _multiTonePin = 0
  }
  _multiToneInitialized = true
}

to '_multiToneLoop' {
  if (not _multiToneInitialized) {'_initMultiTone'}
  comment 'Set initial sample values to virtual zero (the middle of their range).'
  _v1 = 65536
  _v2 = 65536
  _v3 = 65536
  _v4 = 65536
  comment 'Generate and output sound samples. The DAC on the ESP32
is only 8-bits. Other boards have 10-bit DAC or PWM output.'
  if (or ((boardType) == 'Citilab ED1') ((boardType) == 'M5Stack-Core')) {
    forever {
      analogWriteOp _multiTonePin ((('_nextSample') >> 3) + 128)
    }
  } else {
    forever {
      analogWriteOp _multiTonePin (('_nextSample') + 512)
    }
  }
}

to '_nextSample' {
  comment 'Generate up to four triangle waves. v1-v4 hold the current state of
each voice. These numbers range from 0-262143 and are increased by _v1Step-v4Step
each time this function is called. When the state rises above 131072, the output
value begins to decreases back to zero, so the output value for each voice ranges
from 0-131072 with the middle (65536) being "zero". This code has been optimized
to all four voices to be generated fast enough to play in real time on micro:bit v2.'
  _v1 = ((_v1 + _v1Step) & 262143)
  _v2 = ((_v2 + _v2Step) & 262143)
  _v3 = ((_v3 + _v3Step) & 262143)
  _v4 = ((_v4 + _v4Step) & 262143)
  local 'out' 0
  if (_v1 < 131072) {
    out += (_v1 - 65536)
  } else {
    out += (196608 - _v1)
  }
  if (_v2 < 131072) {
    out += (_v2 - 65536)
  } else {
    out += (196608 - _v2)
  }
  if (_v3 < 131072) {
    out += (_v3 - 65536)
  } else {
    out += (196608 - _v3)
  }
  if (_v4 < 131072) {
    out += (_v4 - 65536)
  } else {
    out += (196608 - _v4)
  }
  return (out >> 9)
}

to '_stepForNote' note octave {
  comment 'Return the step size required to generate the given note name in the given octave.
To make the pitches match other instruments, adjust tuningConstant so that an A
in octave zero generates a pitch as close as possible to 440Hz.'
  local 'tuningConstant' 329
  local 'freq' ('_baseFreqForNoteMulti' note)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  return ((freq * tuningConstant) >> 14)
}

to '_uppercaseNote' aString {
  local 'result' (newList (size aString))
  '[data:delete]' 'all' result
  for i (size aString) {
    local 'ch' ('[data:unicodeAt]' i aString)
    if (ch > 32) {
      if (and (97 <= ch) (ch <= 122)) {
        '[data:addLast]' (ch - 32) result
      } else {
        '[data:addLast]' ch result
      }
    }
  }
  return ('[data:unicodeString]' result)
}

to playNoteOnVoice note octave ms voice {
  comment 'Make sure _multiToneLoop is running. Set the step size for the given
voice to start playing the note, wait ms miliseconds, then set step size
to zero to to stop the note.'
  sendBroadcast '_multiToneLoop'
  if (1 == voice) {
    _v1Step = ('_stepForNote' note octave)
    waitMillis ms
    _v1Step = 0
  } (2 == voice) {
    _v2Step = ('_stepForNote' note octave)
    waitMillis ms
    _v2Step = 0
  } (3 == voice) {
    _v3Step = ('_stepForNote' note octave)
    waitMillis ms
    _v3Step = 0
  } (4 == voice) {
    _v4Step = ('_stepForNote' note octave)
    waitMillis ms
    _v4Step = 0
  }
}

to setMultitonePin pin {
  if (pin == '') {
    _multiToneInitialized = false
    return 0
  }
  _multiTonePin = pin
  _multiToneInitialized = true
}


module Ringtone Output
author MicroBlocks
version 1 2 
depends Tone 
description 'Plays tunes in RTTTL (Ringtone Text Transfer Language) a language developed by Nokia to store ringtones.
Also known as Nokring.'
variables '_RTTTL default duration' '_RTTTL default octave' '_RTTTL bpm' '_RTTTL song name' 

  spec 'r' '_RTTTL parse control from' '_RTTTL parse control from _' 'str' ''
  spec ' ' 'play ringtone' 'play ringtone _' 'str' 'Pacman:d=16,o=6,b=140:
b5,b,f#,d#,8b,8d#,c,c7,g,f,8c7,8e,b5,b,f#,d#,8b,8d#,32d#,32e,f,32f,32f#,g,32g,32g#,a,8b'
  spec 'r' 'current song name' 'current song name'
  spec ' ' '_RTTTL play note' '_RTTTL play note _' 'str' '8c#'

to '_RTTTL parse control from' 'control section' {
  comment 'Extract control section'
  local 'd' 4
  local 'o' 6
  local 'b' 63
  repeatUntil ((size (v 'control section')) == 0) {
    local 'next separator' ('[data:find]' ',' (v 'control section'))
    if ((v 'next separator') == -1) {
      'next separator' = (size (v 'control section'))
    }
    local 'to process' ('[data:copyFromTo]' (v 'control section') 1 (v 'next separator'))
    'control section' = ('[data:copyFromTo]' (v 'control section') ((v 'next separator') + 1))
    'next separator' = ('[data:find]' ',' (v 'to process'))
    if ((v 'next separator') == -1) {
      'next separator' = ((size (v 'to process')) + 1)
    }
    if (('[data:find]' 'd' (v 'to process')) > 0) {
      d = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    } (('[data:find]' 'b' (v 'to process')) > 0) {
      b = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    } (('[data:find]' 'o' (v 'to process')) > 0) {
      o = ('[data:copyFromTo]' (v 'to process') (('[data:find]' '=' (v 'to process')) + 1) ((v 'next separator') - 1))
    }
  }
  return ('[data:makeList]' d o b)
}

to '_RTTTL play note' note {
  local 'duration' ''
  local 'note name' ''
  local 'octave' (v '_RTTTL default octave')
  local 'ms / whole note' (240000 / (v '_RTTTL bpm'))
  local 'isDotted' (('[data:find]' '.' note) > -1)
  note = ('_trimmedLowercase' note)
  if (note == '') {
    comment 'empty note string; skip'
    return 0
  }
  comment 'parse duration value, if there is one'
  repeatUntil (or (('[data:unicodeAt]' 1 note) < 48) (('[data:unicodeAt]' 1 note) > 57)) {
    duration = ('[data:join]' duration (at 1 note))
    note = ('[data:copyFromTo]' note 2)
  }
  if (duration == '') {
    duration = (v '_RTTTL default duration')
  }
  comment 'parse note name'
  if (or (('[data:find]' '#' note) > -1) (('[data:find]' '_' note) > -1)) {
    'note name' = ('[data:copyFromTo]' note 1 2)
  } else {
    'note name' = (at 1 note)
  }
  note = ('[data:copyFromTo]' note ((size (v 'note name')) + 1))
  comment 'deal with dotted notes'
  if isDotted {
    duration = ((((v 'ms / whole note') / duration) * 15) / 10)
  } else {
    duration = ((v 'ms / whole note') / duration)
  }
  comment 'parse octave, if there is one'
  if (note != '') {
    octave = (at 1 note)
  }
  'play tone' (v 'note name') (octave - 4) duration
}

to 'current song name' {
  return (v '_RTTTL song name')
}

to 'play ringtone' RTTTL {
  comment 'Initialize frequency map.'
  ignoreArgs ('_baseFreqForNote' 'c')
  comment 'Remove song name'
  '_RTTTL song name' = ('[data:copyFromTo]' RTTTL 1 (('[data:find]' ':' RTTTL) - 1))
  RTTTL = ('[data:copyFromTo]' RTTTL ((size (v '_RTTTL song name')) + 2))
  local 'control' ('_RTTTL parse control from' ('[data:copyFromTo]' RTTTL 1 (('[data:find]' ':' RTTTL) - 1)))
  '_RTTTL default duration' = (at 1 control)
  '_RTTTL default octave' = (at 2 control)
  '_RTTTL bpm' = (at 3 control)
  RTTTL = ('[data:copyFromTo]' RTTTL (('[data:find]' ':' RTTTL) + 1))
  repeatUntil ((size RTTTL) == 0) {
    local 'next separator' ('[data:find]' ',' RTTTL)
    if ((v 'next separator') == -1) {
      'next separator' = ((size RTTTL) + 1)
    }
    local 'next note' ('[data:copyFromTo]' RTTTL 1 ((v 'next separator') - 1))
    RTTTL = ('[data:copyFromTo]' RTTTL ((v 'next separator') + 1))
    '_RTTTL play note' (v 'next note')
  }
  '_RTTTL song name' = ''
}


module ShieldBit Output
author 'Joan Guillén'
version 1 3 
depends Color Tone 
tags keyestudio 'micro:bit' 
choices sb_motorTypes 'sb;all_motors' 'sb;servomotors' 'sb;DC/Stepper_motors' 
choices sb_stepperSteps turns degrees 
choices sb_motorDirections clockwise 'counter-clockwise' 
description 'Provides custom blocks for the shield:bit, which supports 4 DC motors, 2 stepper motors, speaker, headphone jack with volume control, and 4 NeoPixel LEDs.'
variables _sb_neoPixels _sb_pca9685_st_steps 

  spec ' ' 'sb_LEDs_off' 'sb LEDs off'
  spec ' ' 'sb_set_LEDs_to_color' 'sb set all LEDs to _' 'color'
  spec ' ' 'sb_set_LED_to_color' 'sb set LED _ (1-4) to _' 'num color' 1
  space
  spec ' ' 'sb_set_audio_output' 'sb send audio to shield _' 'bool' true
  space
  spec ' ' 'sb_stop_motors' 'sb stop _' 'menu.sb_motorTypes' 'sb;all_motors'
  space
  spec ' ' 'sb_turn_180_servo' 'sb turn 180 servo S- _ (1-8) to angle _' 'num num' 1 90
  spec ' ' 'sb_turn_360_servo' 'sb turn 360 servo S- _ (1-8) _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  space
  spec ' ' 'sb_turn_DC_motor' 'sb turn DC M- _ (1-4) motor _ at _ %' 'num menu.sb_motorDirections num' 1 'clockwise' 50
  spec ' ' 'sb_turn_stepper_motor' 'sb turn Stepper- _ (1-2) motor _ for _ _' 'num menu.sb_motorDirections num menu.sb_stepperSteps' 1 'clockwise' 1 'turns'
  space
  spec ' ' 'sb_set_PWM' 'sb set pin S- _ (1-8) to _ %' 'num num' 1 100
  space
  spec ' ' '_sb_neoPixels_init' '_sb_neoPixels_init'
  spec ' ' '_sb_neoPixels_update' '_sb_neoPixels_update'
  space
  spec ' ' '_sb_pca9685_init' '_sb_pca9685_init'
  spec ' ' '_sb_pca9685_pwm' '_sb_pca9685_pwm pin _ from _ to _' 'num num num' 1 0 0

to '_sb_neoPixels_init' {
  comment 'Create NeoPixel list, if necessary.'
  if (_sb_neoPixels == 0) {
    _sb_neoPixels = (newList 4)
  }
}

to '_sb_neoPixels_update' {
  comment 'Always set the NeoPixel pin.'
  if ((boardType) == 'ESP32') {
    '[display:neoPixelSetPin]' 5 (booleanConstant false)
  } else {
    '[display:neoPixelSetPin]' 16 (booleanConstant false)
  }
  '[display:neoPixelSend]' _sb_neoPixels
  waitMicros 300
}

to '_sb_pca9685_init' {
  comment 'Return if already initialized.'
  if (_sb_pca9685_st_steps != 0) {
    return
  }
  _sb_pca9685_st_steps = 512
  i2cSet (hexToInt '40') 0 128
  waitMillis 100
  i2cSet (hexToInt '40') 0 16
  local '_sb_pca9685_prescale' 129
  i2cSet (hexToInt '40') (hexToInt 'FE') _sb_pca9685_prescale
  i2cSet (hexToInt '40') 0 0
  waitMillis 100
  i2cSet (hexToInt '40') 0 160
  for i 16 {
    '_sb_pca9685_pwm' (i - 1) 0 0
  }
}

to '_sb_pca9685_pwm' pin in out {
  '[sensors:i2cWrite]' 64 ('[data:makeList]' (6 + (4 * pin)) (in & 255) ((in >> 8) & 255) (out & 255) ((out >> 8) & 255))
}

to sb_LEDs_off {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels 0
  '_sb_neoPixels_update'
}

to sb_set_LED_to_color i color {
  '_sb_neoPixels_init'
  atPut i _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_LEDs_to_color color {
  '_sb_neoPixels_init'
  atPut 'all' _sb_neoPixels color
  '_sb_neoPixels_update'
}

to sb_set_PWM pin value {
  '_sb_pca9685_init'
  if (and (1 <= pin) (pin <= 8)) {
    if (value < 0) {value = 0}
    if (100 < value) {value = 100}
    value = ((value * 4095) / 100)
    '_sb_pca9685_pwm' (pin + 7) 0 value
  }
}

to sb_set_audio_output useShield {
  if useShield {
    if ((boardType) == 'ESP32') {
      _tonePin = 12
    } else {
      _tonePin = 0
    }
  } else {
    if ((boardType) == 'ESP32') {
      _tonePin = 33
    } else {
      _tonePin = -1
    }
  }
  _toneInitalized = (booleanConstant true)
}

to sb_stop_motors type {
  '_sb_pca9685_init'
  if (or (type == 'sb;DC/Steppers') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (or (type == 'sb;servomotors') (type == 'sb;all_motors')) {
    for i 8 {
      '_sb_pca9685_pwm' (i + 7) 0 0
    }
  }
}

to sb_turn_180_servo s angle {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (angle < 0) {angle = 0}
    if (180 < angle) {angle = 180}
    angle = (((((angle * 1800) / 180) + 600) * 4095) / 20000)
    '_sb_pca9685_pwm' (s + 7) 0 angle
  }
}

to sb_turn_360_servo s direction speed {
  '_sb_pca9685_init'
  if (and (1 <= s) (s <= 8)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    if (direction == 'counter-clockwise') {
      speed = (((((speed * 900) / 100) + 1500) * 4095) / 20000)
    } else {
      speed = (((((speed * -900) / 100) + 1500) * 4095) / 20000)
    }
    '_sb_pca9685_pwm' (s + 7) 0 speed
  }
}

to sb_turn_DC_motor m direction speed {
  '_sb_pca9685_init'
  if (and (1 <= m) (m <= 4)) {
    if (speed < 0) {speed = 0}
    if (100 < speed) {speed = 100}
    speed = ((speed * 4095) / 100)
    local 'pin2' ((m - 1) * 2)
    local 'pin1' (pin2 + 1)
    if (or (and (or (m == 1) (m == 2)) (direction == 'counter-clockwise')) (and (or (m == 3) (m == 4)) (not (direction == 'counter-clockwise')))) {
      pin2 = pin1
      pin1 = (pin2 - 1)
    }
    '_sb_pca9685_pwm' pin1 0 0
    '_sb_pca9685_pwm' pin2 0 speed
  }
}

to sb_turn_stepper_motor stp direction steps unit {
  '_sb_pca9685_init'
  if (steps < 0) {
    steps = 0
  }
  steps = (steps * ((1000 * _sb_pca9685_st_steps) / 50))
  if (unit == 'degrees') {
    steps = (steps / 360)
  }
  if (stp == 1) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 1 0 1023
      '_sb_pca9685_pwm' 0 1024 2047
      '_sb_pca9685_pwm' 3 2048 3071
      '_sb_pca9685_pwm' 2 3072 4095
    } else {
      '_sb_pca9685_pwm' 2 0 1023
      '_sb_pca9685_pwm' 3 1024 2047
      '_sb_pca9685_pwm' 0 2048 3071
      '_sb_pca9685_pwm' 1 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i - 1) 0 0
    }
  }
  if (stp == 2) {
    if (direction == 'counter-clockwise') {
      '_sb_pca9685_pwm' 7 0 1023
      '_sb_pca9685_pwm' 6 1024 2047
      '_sb_pca9685_pwm' 5 2048 3071
      '_sb_pca9685_pwm' 4 3072 4095
    } else {
      '_sb_pca9685_pwm' 4 0 1023
      '_sb_pca9685_pwm' 5 1024 2047
      '_sb_pca9685_pwm' 6 2048 3071
      '_sb_pca9685_pwm' 7 3072 4095
    }
    waitMillis steps
    for i 4 {
      '_sb_pca9685_pwm' (i + 3) 0 0
    }
  }
}


module Tone Output
author MicroBlocks
version 1 9 
tags tone sound music audio note speaker 
choices tone_NoteName 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 
description 'Audio tone generation. Make music with MicroBlocks!
'
variables _tonePin _toneInitalized _toneLoopOverhead _toneNoteNames _toneArezzoNotes _toneFrequencies 

  spec ' ' 'play tone' 'play note _ octave _ for _ ms' 'str.tone_NoteName num num' 'nt;c' 0 500
  spec ' ' 'playMIDIKey' 'play midi key _ for _ ms' 'num num' 60 500
  spec ' ' 'play frequency' 'play frequency _ for _ ms' 'num num' 261 500
  space
  spec ' ' 'startTone' 'start tone _ Hz' 'num' 440
  spec ' ' 'stopTone' 'stop tone'
  space
  spec ' ' 'attach buzzer to pin' 'attach buzzer to pin _' 'auto' ''
  space
  spec 'r' '_measureLoopOverhead' '_measureLoopOverhead'
  spec 'r' '_baseFreqForNote' '_baseFreqForNote _' 'auto' 'c'
  spec 'r' '_baseFreqForSemitone' '_baseFreqForSemitone _' 'num' 0
  spec ' ' '_toneLoop' '_toneLoop _ for _ ms' 'num num' 440000 100
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'
  spec ' ' '_tone init note names' '_tone init note names'

to '_baseFreqForNote' note {
  comment 'Return the frequency for the given note in the middle-C octave
scaled by 1000. For example, return 440000 (440Hz) for A.
Note names may be upper or lower case. Note names
may be followed by # for a sharp or b for a flat.'
  local 'normalized note' ('_trimmedLowercase' note)
  'normalized note' = (ifExpression ((at 1 (v 'normalized note')) == 'n') (v 'normalized note') ('[data:join]' 'nt;' (v 'normalized note')))
  '_tone init note names'
  if (('[data:find]' (v 'normalized note') _toneArezzoNotes) > 0) {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneArezzoNotes))
  } else {
    return ('_baseFreqForSemitone' ('[data:find]' (v 'normalized note') _toneNoteNames))
  }
}

to '_baseFreqForSemitone' semitone {
  if (_toneFrequencies == 0) {_toneFrequencies = ('[data:makeList]' 261626 277183 293665 311127 329628 349228 369994 391995 415305 440000 466164 493883 246942 277183 277183 311127 311127 349228 329628 369994 369994 415305 415305 466164 466164 523252)}
  if (and (1 <= semitone) (semitone <= (size _toneFrequencies))) {
    return (at semitone _toneFrequencies)
  } else {
    comment 'Bad note name; return 10 Hz'
    return 10000
  }
}

to '_measureLoopOverhead' {
  comment 'Measure the loop overhead on this device'
  local 'halfCycle' 100
  local 'startT' (microsOp)
  repeat 100 {
    digitalWriteOp _tonePin false
    waitMicros halfCycle
    digitalWriteOp _tonePin false
    waitMicros halfCycle
  }
  local 'usecs' ((microsOp) - startT)
  return ((usecs - 20000) / 200)
}

to '_tone init note names' {
  if (_toneNoteNames == 0) {
    _toneNoteNames = ('[data:makeList]' 'nt;c' 'nt;c#' 'nt;d' 'nt;d#' 'nt;e' 'nt;f' 'nt;f#' 'nt;g' 'nt;g#' 'nt;a' 'nt;a#' 'nt;b' 'nt;c_' 'nt;db' 'nt;d_' 'nt;eb' 'nt;e_' 'nt;e#' 'nt;f_' 'nt;gb' 'nt;g_' 'nt;ab' 'nt;a_' 'nt;bb' 'nt;b_' 'nt;b#')
    _toneArezzoNotes = ('[data:makeList]' 'nt;do' 'nt;do#' 'nt;re' 'nt;re#' 'nt;mi' 'nt;fa' 'nt;fa#' 'nt;sol' 'nt;sol#' 'nt;la' 'nt;la#' 'nt;si' 'nt;do_' 'nt;dob' 'nt;re_' 'nt;reb' 'nt;mi_' 'nt;mi#' 'nt;fa_' 'nt;solb' 'nt;sol_' 'nt;lab' 'nt;la_' 'nt;sib' 'nt;si_' 'nt;si#')
  }
}

to '_toneLoop' scaledFreq ms {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {
    '[io:playTone]' _tonePin (scaledFreq / 1000)
    waitMillis ms
    '[io:playTone]' _tonePin 0
  } else {
    local 'halfCycle' ((500000000 / scaledFreq) - _toneLoopOverhead)
    local 'cycles' ((ms * 500) / halfCycle)
    repeat cycles {
      digitalWriteOp _tonePin true
      waitMicros halfCycle
      digitalWriteOp _tonePin false
      waitMicros halfCycle
    }
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}

to 'attach buzzer to pin' pinNumber {
  if (pinNumber == '') {
    comment 'Pin number not specified; use default pin for this device'
    if ((boardType) == 'Citilab ED1') {
      _tonePin = 26
    } ((boardType) == 'M5Stack-Core') {
      _tonePin = 25
    } ((boardType) == 'M5StickC') {
      _tonePin = 26
    } ((boardType) == 'Calliope') {
      digitalWriteOp 23 true
      digitalWriteOp 24 true
      _tonePin = 25
    } ((boardType) == 'D1-Mini') {
      _tonePin = 12
    } else {
      _tonePin = -1
    }
  } else {
    _tonePin = pinNumber
  }
  _toneLoopOverhead = ('_measureLoopOverhead')
  _toneInitalized = (booleanConstant true)
}

to 'play frequency' freq ms {
  '_toneLoop' (freq * 1000) ms
}

to 'play tone' note octave ms {
  local 'freq' ('_baseFreqForNote' note)
  if (freq <= 10000) {
    waitMillis ms
    return 0
  }
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to playMIDIKey key ms {
  local 'freq' ('_baseFreqForSemitone' ((key % 12) + 1))
  local 'octave' ((key / 12) - 5)
  if (octave < 0) {
    repeat (absoluteValue octave) {
      freq = (freq / 2)
    }
  }
  repeat octave {
    freq = (freq * 2)
  }
  '_toneLoop' freq ms
}

to startTone freq {
  if (_toneInitalized == 0) {'attach buzzer to pin' ''}
  if ('[io:hasTone]') {'[io:playTone]' _tonePin freq}
}

to stopTone {
  startTone 0
}

